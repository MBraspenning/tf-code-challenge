{"version":3,"sources":["__generated__/AppWeatherQuery.graphql.ts","store/actions.ts","API/fetchGraphQL.ts","API/RelayEnvironment.ts","store/store.ts","components/UserInput.tsx","components/ValidResult.tsx","components/InvalidResult.tsx","components/Result.tsx","components/Header.tsx","components/LoadingIndicator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["node","v0","v1","v2","v3","v4","hash","ActionType","fetchGraphQL","operation","variables","a","fetch","method","headers","body","JSON","stringify","query","text","response","json","fetchRelay","params","Environment","network","Network","create","store","Store","RecordSource","initialState","city","reducer","state","action","type","SetCity","payload","Context","React","createContext","UserInput","context","useContext","dispatch","useState","inputValue","setInputValue","handleSubmit","handleClear","className","value","onChange","event","target","onKeyDown","key","autoFocus","placeholder","data-testid","onClick","ValidResult","data","getCityByName","name","weather","summary","description","Math","round","temperature","actual","max","min","feelsLike","wind","speed","clouds","visibility","humidity","InvalidResult","Result","queryReference","usePreloadedQuery","WeatherQuery","Header","LoadingIndicator","Suspense","App","useQueryLoader","loadQuery","useEffect","fallback","viewBox","xmlns","d","transform","AppRoot","useReducer","environment","RelayEnvironment","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9892346.chunk.js","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n\nimport { ConcreteRequest } from \"relay-runtime\";\n\nexport type AppWeatherQueryVariables = {\n    city: string;\n};\nexport type AppWeatherQueryResponse = {\n    readonly getCityByName: {\n        readonly name: string | null;\n        readonly country: string | null;\n        readonly weather: {\n            readonly summary: {\n                readonly title: string | null;\n                readonly description: string | null;\n                readonly icon: string | null;\n            } | null;\n            readonly temperature: {\n                readonly actual: number | null;\n                readonly feelsLike: number | null;\n                readonly min: number | null;\n                readonly max: number | null;\n            } | null;\n            readonly wind: {\n                readonly speed: number | null;\n            } | null;\n            readonly clouds: {\n                readonly all: number | null;\n                readonly visibility: number | null;\n                readonly humidity: number | null;\n            } | null;\n        } | null;\n    } | null;\n};\nexport type AppWeatherQuery = {\n    readonly response: AppWeatherQueryResponse;\n    readonly variables: AppWeatherQueryVariables;\n};\n\n\n\n/*\nquery AppWeatherQuery(\n  $city: String!\n) {\n  getCityByName(name: $city, config: {units: metric, lang: nl}) {\n    name\n    country\n    weather {\n      summary {\n        title\n        description\n        icon\n      }\n      temperature {\n        actual\n        feelsLike\n        min\n        max\n      }\n      wind {\n        speed\n      }\n      clouds {\n        all\n        visibility\n        humidity\n      }\n    }\n    id\n  }\n}\n*/\n\nconst node: ConcreteRequest = (function(){\nvar v0 = [\n  {\n    \"defaultValue\": null,\n    \"kind\": \"LocalArgument\",\n    \"name\": \"city\"\n  }\n],\nv1 = [\n  {\n    \"kind\": \"Literal\",\n    \"name\": \"config\",\n    \"value\": {\n      \"lang\": \"nl\",\n      \"units\": \"metric\"\n    }\n  },\n  {\n    \"kind\": \"Variable\",\n    \"name\": \"name\",\n    \"variableName\": \"city\"\n  }\n],\nv2 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"name\",\n  \"storageKey\": null\n},\nv3 = {\n  \"alias\": null,\n  \"args\": null,\n  \"kind\": \"ScalarField\",\n  \"name\": \"country\",\n  \"storageKey\": null\n},\nv4 = {\n  \"alias\": null,\n  \"args\": null,\n  \"concreteType\": \"Weather\",\n  \"kind\": \"LinkedField\",\n  \"name\": \"weather\",\n  \"plural\": false,\n  \"selections\": [\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"Summary\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"summary\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"title\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"description\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"icon\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"Temperature\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"temperature\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"actual\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"feelsLike\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"min\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"max\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"Wind\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"wind\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"speed\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    },\n    {\n      \"alias\": null,\n      \"args\": null,\n      \"concreteType\": \"Clouds\",\n      \"kind\": \"LinkedField\",\n      \"name\": \"clouds\",\n      \"plural\": false,\n      \"selections\": [\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"all\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"visibility\",\n          \"storageKey\": null\n        },\n        {\n          \"alias\": null,\n          \"args\": null,\n          \"kind\": \"ScalarField\",\n          \"name\": \"humidity\",\n          \"storageKey\": null\n        }\n      ],\n      \"storageKey\": null\n    }\n  ],\n  \"storageKey\": null\n};\nreturn {\n  \"fragment\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Fragment\",\n    \"metadata\": null,\n    \"name\": \"AppWeatherQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"City\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"getCityByName\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          (v4/*: any*/)\n        ],\n        \"storageKey\": null\n      }\n    ],\n    \"type\": \"Query\",\n    \"abstractKey\": null\n  },\n  \"kind\": \"Request\",\n  \"operation\": {\n    \"argumentDefinitions\": (v0/*: any*/),\n    \"kind\": \"Operation\",\n    \"name\": \"AppWeatherQuery\",\n    \"selections\": [\n      {\n        \"alias\": null,\n        \"args\": (v1/*: any*/),\n        \"concreteType\": \"City\",\n        \"kind\": \"LinkedField\",\n        \"name\": \"getCityByName\",\n        \"plural\": false,\n        \"selections\": [\n          (v2/*: any*/),\n          (v3/*: any*/),\n          (v4/*: any*/),\n          {\n            \"alias\": null,\n            \"args\": null,\n            \"kind\": \"ScalarField\",\n            \"name\": \"id\",\n            \"storageKey\": null\n          }\n        ],\n        \"storageKey\": null\n      }\n    ]\n  },\n  \"params\": {\n    \"cacheID\": \"fdcefdd7dce429c61328a1fe0ca78f51\",\n    \"id\": null,\n    \"metadata\": {},\n    \"name\": \"AppWeatherQuery\",\n    \"operationKind\": \"query\",\n    \"text\": \"query AppWeatherQuery(\\n  $city: String!\\n) {\\n  getCityByName(name: $city, config: {units: metric, lang: nl}) {\\n    name\\n    country\\n    weather {\\n      summary {\\n        title\\n        description\\n        icon\\n      }\\n      temperature {\\n        actual\\n        feelsLike\\n        min\\n        max\\n      }\\n      wind {\\n        speed\\n      }\\n      clouds {\\n        all\\n        visibility\\n        humidity\\n      }\\n    }\\n    id\\n  }\\n}\\n\"\n  }\n};\n})();\n(node as any).hash = 'b7f36042775b546902520c09c1c12d98';\nexport default node;\n","export interface IAction {\n    type: ActionType\n    payload?: any\n}\n\nexport enum ActionType {\n    SetCity = 'SetCity'\n}\n","import {RequestParameters, Variables} from \"relay-runtime\";\n\nconst fetchGraphQL = async (operation: RequestParameters, variables: Variables) => {\n    const response = await fetch('https://graphql-weather-api.herokuapp.com/', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            query: operation.text,\n            variables,\n        }),\n    });\n\n    return await response.json();\n}\n\nexport default fetchGraphQL;\n","// your-app-name/src/RelayEnvironment.js\nimport {Environment, Network, RecordSource, RequestParameters, Store, Variables} from 'relay-runtime';\nimport fetchGraphQL from './fetchGraphQL';\n\n// Relay passes a \"params\" object with the query name and text. So we define a helper function\n// to call our fetchGraphQL utility with params.text.\nconst fetchRelay = async (params: RequestParameters, variables: Variables) => {\n    return fetchGraphQL(params, variables);\n}\n\n// Export a singleton instance of Relay Environment configured with our network function:\nexport default new Environment({\n    network: Network.create(fetchRelay),\n    store: new Store(new RecordSource()),\n});\n","import React from 'react';\nimport {ActionType, IAction} from \"./actions\";\n\nexport interface IState {\n    city: string\n}\n\nexport interface IContext {\n    state: IState\n    dispatch: React.Dispatch<IAction>\n}\n\nexport const initialState: IState = {\n    city: 'Antwerpen'\n}\n\nexport const reducer = (state: IState, action: IAction): IState => {\n    switch (action.type) {\n        case ActionType.SetCity:\n            return { ...state, city: action.payload }\n        default:\n            return state;\n    }\n}\n\nexport const Context = React.createContext({} as IContext);\n","import React, {useContext, useState} from 'react';\nimport {Context} from \"../store/store\";\nimport {ActionType} from \"../store/actions\";\nimport {FiSearch} from \"react-icons/fi\";\nimport {TiDelete} from \"react-icons/ti\";\n\nimport '../styles/components/UserInput.scss';\n\nconst UserInput = () => {\n    const context = useContext(Context);\n    const { state, dispatch } = context;\n\n    const [inputValue, setInputValue] = useState(state.city);\n\n    const handleSubmit = () => {\n        if (inputValue === '') return;\n\n        dispatch({ type: ActionType.SetCity, payload: inputValue });\n    }\n\n    const handleClear = () => {\n        setInputValue('');\n    }\n\n    const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            handleSubmit();\n        }\n\n        if (event.key === 'Escape') {\n            handleClear();\n        }\n    }\n\n    return (\n        <div className='user-input'>\n            <div className='user-input_search'>\n                <input\n                    type='text'\n                    value={inputValue}\n                    onChange={event => setInputValue(event.target.value)}\n                    onKeyDown={handleKeyPress}\n                    autoFocus\n                    placeholder='Enter a city'\n                    data-testid='city-input'\n                    className='user-input_text'\n                />\n                <button\n                    onClick={handleClear}\n                    data-testid='city-clear'\n                    className='user-input_clear user-input_button'\n                >\n                    <TiDelete />\n                </button>\n                <button\n                    onClick={handleSubmit}\n                    data-testid='city-submit'\n                    className='user-input_submit user-input_button'\n                >\n                    <FiSearch />\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default UserInput;\n","import React from 'react';\n\nconst ValidResult = ({data}) => {\n    return (\n        <div className='result-valid'>\n            <div className='result-main'>\n                <h2 className='result-city' data-testid='result-city'>{data.getCityByName?.name}</h2>\n                <span className='result-description' data-testid='result-description'>{data.getCityByName?.weather?.summary?.description}</span>\n                <span className='result-actual' data-testid='result-actual'>\n                    {Math.round(data.getCityByName?.weather?.temperature?.actual)}°\n                </span>\n                <div className='result-min-max'>\n                    <span data-testid='result-max'>Max: {Math.round(data.getCityByName?.weather?.temperature?.max)}°</span>\n                    <span data-testid='result-min'>Min: {Math.round(data.getCityByName?.weather?.temperature?.min)}°</span>\n                </div>\n            </div>\n            <div className='result-details'>\n                <div className='result-details-row'>\n                    <div className='result-detail'>\n                        <span className='result-detail-label'>Voelt als</span>\n                        <span data-testid='result-feels-like' className='result-detail-value'>{Math.round(data.getCityByName?.weather?.temperature?.feelsLike)}°</span>\n                    </div>\n                    <div className='result-detail'>\n                        <span className='result-detail-label'>Wind</span>\n                        <span data-testid='result-wind' className='result-detail-value'>{Math.round(data.getCityByName?.weather?.wind?.speed * 3.6)} km/u</span>\n                    </div>\n                </div>\n                <div className='result-details-row'>\n                    <div className='result-detail'>\n                        <span className='result-detail-label'>Zicht</span>\n                        <span data-testid='result-visibility' className='result-detail-value'>{data.getCityByName?.weather?.clouds?.visibility / 1000} km</span>\n                    </div>\n                    <div className='result-detail'>\n                        <span className='result-detail-label'>Vochtigheid</span>\n                        <span data-testid='result-humidity' className='result-detail-value'>{data.getCityByName?.weather?.clouds?.humidity}%</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ValidResult;\n","import React from 'react';\n\nconst InvalidResult = () => {\n    return (\n        <div data-testid='result-invalid' className='result-invalid'>\n            <p>\n                Oops... It seems like the city you requested could not be found.\n            </p>\n            <p>Please try again</p>\n        </div>\n    )\n}\n\nexport default InvalidResult;\n","import React from 'react';\nimport {PreloadedQuery, usePreloadedQuery} from \"react-relay\";\nimport type {AppWeatherQuery as AppWeatherQueryType} from \"../__generated__/AppWeatherQuery.graphql\";\nimport {WeatherQuery} from \"../App\";\nimport ValidResult from \"./ValidResult\";\nimport InvalidResult from \"./InvalidResult\";\n\nimport '../styles/components/Result.scss';\n\ninterface IProps {\n    queryReference: PreloadedQuery<AppWeatherQueryType>\n}\n\nconst Result = ({ queryReference }: IProps) => {\n    const data = usePreloadedQuery<AppWeatherQueryType>(WeatherQuery, queryReference);\n\n    return (\n        <div className='result-card'>\n            {\n                data.getCityByName ? <ValidResult data={data} /> : <InvalidResult />\n            }\n        </div>\n    )\n}\n\nexport default Result\n","import React from 'react';\n\nimport '../styles/components/Header.scss';\n\nconst Header = () => {\n    return (\n        <div className='header'>\n            <h1>Trusted Family Weather App</h1>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from 'react';\nimport {AiOutlineLoading3Quarters} from \"react-icons/ai\";\n\nimport '../styles/components/LoadingIndicator.scss';\n\nconst LoadingIndicator = () => {\n    return (\n        <div data-testid='loading-indicator' className='loading-indicator'>\n            <AiOutlineLoading3Quarters />\n        </div>\n    )\n}\n\nexport default LoadingIndicator;\n","import React, {useContext, useEffect, useReducer} from 'react';\nimport './App.scss';\nimport {graphql} from 'babel-plugin-relay/macro';\nimport {\n    RelayEnvironmentProvider,\n} from 'react-relay/hooks';\nimport RelayEnvironment from './API/RelayEnvironment';\nimport UserInput from \"./components/UserInput\";\nimport {Context, initialState, reducer} from \"./store/store\";\nimport Result from \"./components/Result\";\nimport {useQueryLoader} from \"react-relay\";\nimport type {AppWeatherQuery as AppWeatherQueryType} from \"./__generated__/AppWeatherQuery.graphql\";\nimport Header from \"./components/Header\";\nimport LoadingIndicator from \"./components/LoadingIndicator\";\n\nconst {Suspense} = React;\n\nexport const WeatherQuery = graphql`\n    query AppWeatherQuery ($city: String!) {\n        getCityByName (name: $city, config: {units: metric, lang: nl}) {\n            name\n            country\n            weather {\n                summary {\n                    title\n                    description\n                    icon\n                }\n                temperature {\n                    actual\n                    feelsLike\n                    min\n                    max\n                }\n                wind {\n                    speed\n                }\n                clouds {\n                    all\n                    visibility\n                    humidity\n                }\n            }\n        }\n    }\n`;\n\nfunction App() {\n    const [queryReference, loadQuery] = useQueryLoader<AppWeatherQueryType>(WeatherQuery);\n    const context = useContext(Context);\n    const { state } = context;\n\n    useEffect(() => {\n        loadQuery({ city: state.city });\n    }, [loadQuery, state.city])\n\n    return (\n        <div className=\"App\">\n            <Header />\n\n            <UserInput />\n\n            <div className='result-container'>\n                <Suspense fallback={<LoadingIndicator />}>\n                    {\n                        queryReference &&\n                        <Result queryReference={queryReference} />\n                    }\n                </Suspense>\n            </div>\n\n            <svg className='background-blob blob-1' viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M31.7,-45.6C43.6,-41.7,57.5,-37.1,61.3,-28.2C65.1,-19.2,59,-5.8,56.9,8.1C54.8,22,56.7,36.4,51,45.9C45.4,55.4,32.2,59.9,18.6,64.3C5.1,68.7,-8.8,72.9,-21.2,70.2C-33.7,67.5,-44.7,57.9,-50,46.3C-55.3,34.8,-55,21.3,-58.6,7.4C-62.3,-6.6,-69.9,-21,-68.5,-34.2C-67,-47.4,-56.4,-59.3,-43.5,-62.7C-30.5,-66,-15.3,-60.8,-2.7,-56.6C9.9,-52.5,19.8,-49.4,31.7,-45.6Z\" transform=\"translate(100 100)\" />\n            </svg>\n\n            <svg className='background-blob blob-2' viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M48.7,-73C61.5,-67.6,69,-51.3,76.2,-35C83.5,-18.6,90.4,-2.3,87.2,11.8C84,25.9,70.7,37.8,57.9,47.3C45.2,56.8,33,63.9,18.8,71.4C4.6,78.9,-11.6,86.9,-24.1,82.9C-36.6,78.8,-45.3,62.8,-54,48.9C-62.6,35,-71.3,23.3,-75,9.7C-78.7,-3.9,-77.4,-19.4,-71.2,-32.3C-65,-45.3,-53.8,-55.8,-41.1,-61.3C-28.4,-66.7,-14.2,-67.1,1.9,-70.1C18,-73,36,-78.5,48.7,-73Z\" transform=\"translate(100 100)\" />\n            </svg>\n\n            <svg className='background-blob blob-3' viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M50,-56.7C62.3,-49.3,67.9,-31.1,70.9,-12.7C73.8,5.6,74,24.2,66,38.2C58.1,52.1,41.9,61.4,24.2,68.9C6.5,76.3,-12.7,81.9,-26.6,75.7C-40.5,69.5,-49.1,51.4,-54.3,35C-59.4,18.5,-61.2,3.7,-61.9,-14.2C-62.6,-32.1,-62.4,-53,-51.9,-60.8C-41.4,-68.5,-20.7,-63.1,-0.9,-62C18.9,-60.9,37.7,-64.2,50,-56.7Z\" transform=\"translate(100 100)\" />\n            </svg>\n        </div>\n    );\n}\n\nfunction AppRoot() {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <RelayEnvironmentProvider environment={RelayEnvironment}>\n            <Context.Provider value={{ state, dispatch }}>\n                <App />\n            </Context.Provider>\n        </RelayEnvironmentProvider>\n    );\n}\n\nexport default AppRoot;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}